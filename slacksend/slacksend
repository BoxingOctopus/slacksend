#!/usr/bin/env python -B

import requests
import toml
import click
import os
import codecs
import base64 as b64
import requests.exceptions
import urllib3.exceptions


class ConfigObject:

    def __init__(self, config_file=None, token=None, team_id=None, bot_id=None, username=None, channel=None):

        if config_file is None:
            self.config_file = os.path.expanduser('~') + "/.slacksend/config.toml"
        elif config_file is None and not os.path.exists(os.path.expanduser('~') + "/.slacksend/config.toml"):
            self.config_file = os.getcwd() + "/config.toml"
        else:
            self.config_file = config_file

        try:
            with open(self.config_file) as cnf:
                conf = toml.loads(cnf.read())

            self.token = conf['slack']['token']
            self.team_id = conf['slack']['team_id']
            self.bot_id = conf['slack']['bot_id']
            self.username = conf['slack']['username']
            self.channel = conf['slack']['channel']

        except FileNotFoundError:

            self.token = token
            self.team_id = team_id
            self.bot_id = bot_id
            self.username = username
            self.channel = channel


class SlackSend:

    def __init__(self, token, team_id, bot_id, username, channel, text):

        self.token = token
        self.team_id = team_id
        self.bot_id = bot_id
        self.username = username
        self.channel = channel
        self.text = text

    def send_message(self):

        params = {
            'username': self.username,
            'channel': self.channel,
            'text': self.text
        }

        slack_url = 'https://hooks.slack.com/services/{0}/{1}/{2}'.format(self.team_id, self.bot_id, self.token)

        try:
            r = requests.post(slack_url, json=params)

            print('{0} {1}'.format(r.status_code, r.text))
        except requests.exceptions.ConnectionError:
            print('Oops! There was an error. The Response from Slack was: {0} {1}').format(r.status_code, r.text)
        except urllib3.exceptions.NewConnectionError or urllib3.exceptions.MaxRetryError:
            print('Could not connect to Slack')


@click.command(help='Send Message to Slack via Incoming Webhook')
@click.option('-t', '--token', help='Slack Webhook Token')
@click.option('-e', '--team_id', help='Team ID')
@click.option('-o', '--bot_id', help='Bot ID ')
@click.option('-u', '--username', help='Username to Post as on Slack')
@click.option('-c', '--channel', help='Channel to Post Message to on Slack')
@click.option('-m', '--message', help='Message to Post')
@click.option('-r', '--rot13', is_flag=True, help='Send message ROT13 Encoded')
@click.option('-b', '--base64', is_flag=True, help='Send message Base64 Encoded')
def post_message(token, team_id, bot_id, username, channel, message, rot13, base64):

    cfg = ConfigObject()

    if rot13:
        msg_text = '`rot13("{}")`'.format(codecs.encode(message, 'rot13'))
    elif base64:
        msg_text = '`base64("{}")`'.format(b64.b64encode(bytes(message, 'utf-8')).decode('utf-8'))
    else:
        msg_text = message

    if os.path.exists(cfg.config_file):
        msg = SlackSend(cfg.token, cfg.team_id, cfg.bot_id, cfg.username, cfg.channel, msg_text)
    else:
        msg = SlackSend(token, team_id, bot_id, username, channel, msg_text)

    msg.send_message()
    print('Message has been sent successfully!')


if __name__ == '__main__':
    post_message()
